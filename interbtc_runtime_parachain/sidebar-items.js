initSidebarItems({"constant":[["BITCOIN_BLOCK_SPACING",""],["BITCOIN_SPACING_MS",""],["CENTS",""],["DAYS",""],["EPOCH_DURATION_IN_BLOCKS",""],["GRAND",""],["HOURS",""],["KBTC",""],["KINT",""],["KSM",""],["MILLICENTS",""],["MILLISECS_PER_BLOCK",""],["MINUTES",""],["PRIMARY_PROBABILITY",""],["SLOT_DURATION",""],["TARGET_SPACING","Target Spacing: 10 minutes (600 seconds)"],["UNITS",""],["VERSION","This runtime version."],["WASM_BINARY",""],["WASM_BINARY_BLOATY",""],["WEIGHT_PER_SECOND",""]],"enum":[["Call",""],["CurrencyId",""],["DispatchClass","A generalized group of dispatch types."],["Event",""],["Everything","A [`Contains`] implementation that contains every value."],["IssueEvent","The event emitted by this pallet."],["NominationEvent","The event emitted by this pallet."],["OriginCaller",""],["RedeemEvent","The event emitted by this pallet."],["RefundEvent","The event emitted by this pallet."],["RelayCall","Contains one variant per dispatchable that can be called by an extrinsic."],["RelayEvent","The event emitted by this pallet."],["ReplaceEvent","The event emitted by this pallet."],["StatusCode","Enum indicating the status of the BTC Parachain."],["TimestampCall","Contains one variant per dispatchable that can be called by an extrinsic."]],"fn":[["deposit",""],["get_all_module_accounts",""],["native_version","The version information used to identify this runtime when compiled natively."]],"macro":[["construct_runtime","Construct a runtime, with the given name and the given pallets."],["parameter_types","Create new implementations of the `Get` trait."]],"mod":[["api",""]],"struct":[["AccountIdToMultiLocation",""],["Ancestry",""],["BalanceWrapper","a wrapper around a balance, used in RPC to workaround a bug where using u128 in runtime-apis fails. See https://github.com/paritytech/substrate/issues/4641"],["BlockExecutionWeight","Importing a block with 0 txs takes ~5 ms"],["BlockHashCount",""],["Burn",""],["CandidacyBond",""],["CooloffPeriod",""],["CurrencyConvert",""],["CurrencyIdConvert",""],["DesiredMembers",""],["DesiredRunnersUp",""],["DustRemovalWhitelist",""],["ElectionsPhragmenPalletId",""],["EnactmentPeriod",""],["EnsureKintsugiLabs",""],["ExistentialDeposits",""],["ExtrinsicBaseWeight","Executing 10,000 System remarks (no-op) txs takes ~1.26 seconds -> ~125 µs per tx"],["FastTrackVotingPeriod",""],["FeeAccount",""],["FeePalletId",""],["GeneralCouncilMaxMembers",""],["GeneralCouncilMaxProposals",""],["GeneralCouncilMotionDuration",""],["GenesisConfig",""],["GetCollateralCurrencyId",""],["GetNativeCurrencyId",""],["GetWrappedCurrencyId",""],["IdentityFee","Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee."],["InstantAllowed",""],["IssueRequest",""],["KintsugiLabsAccounts",""],["LaunchPeriod",""],["MaxApprovals",""],["MaxLocks",""],["MaxProposals",""],["MaxScheduledPerBlock",""],["MaxVestingSchedules",""],["MaxVotes",""],["MaximumSchedulerWeight",""],["MinVestedTransfer",""],["MinimumDeposit",""],["MinimumPeriod",""],["Origin",""],["PalletInfo","Provides an implementation of `PalletInfo` to provide information about the pallet setup in the runtime."],["ParachainBlocksPerBitcoinBlock",""],["ParentLocation",""],["ParentNetwork",""],["ParentOrParentsUnitPlurality",""],["Perbill","A fixed point representation of a number in the range [0, 1]."],["Permill","A fixed point representation of a number in the range [0, 1]."],["PreimageByteDeposit",""],["ProposalBond",""],["ProposalBondMinimum",""],["RedeemRequest",""],["RefundRequest",""],["RelayChainBlockNumberProvider",""],["RelayChainOrigin",""],["ReplaceRequest",""],["ReservedDmpWeight",""],["ReservedXcmpWeight",""],["RocksDbWeight","By default, Substrate uses RocksDB, so this will be the weight used throughout the runtime."],["Runtime",""],["RuntimeApi",""],["RuntimeApiImpl","Implements all runtime apis for the client side."],["RuntimeBlockLength",""],["RuntimeBlockWeights",""],["SS58Prefix",""],["SelfLocation",""],["SessionKeys",""],["SpendPeriod",""],["TechnicalCommitteeMaxMembers",""],["TechnicalCommitteeMaxProposals",""],["TechnicalCommitteeMotionDuration",""],["TermDuration",""],["TransactionByteFee",""],["TreasuryPalletId",""],["UnitWeightCost",""],["VaultRegistryPalletId",""],["Version",""],["VotingBondBase",""],["VotingBondFactor",""],["VotingPeriod",""],["XcmConfig",""]],"trait":[["BuildStorage","Complex storage builder stuff."],["CurrencyInfo",""],["Get","A trait for querying a single value from a type."],["KeyOwnerProofSystem","Something which can compute and check proofs of a historical key owner and return full identification data of that key owner."],["StorageValue","A trait for working with macro-generated storage values under the substrate storage API."]],"type":[["AccountId","Some way of identifying an account on the chain. We intentionally make it equivalent to the public key of our transaction signing scheme."],["Address","The address format for describing accounts."],["AllModules","All modules included in the runtime as a nested tuple of types. Excludes the System pallet."],["AllModulesWithSystem","All modules included in the runtime as a nested tuple of types."],["AllPallets","All pallets included in the runtime as a nested tuple of types. Excludes the System pallet."],["AllPalletsWithSystem","All pallets included in the runtime as a nested tuple of types."],["Aura",""],["AuraConfig",""],["AuraExt",""],["AuraExtConfig",""],["AuraId","An Aura authority identifier using S/R 25519 as its crypto."],["BTCRelay",""],["BTCRelayConfig",""],["Balance","Balance of an account."],["Barrier",""],["Block","Block type as expected by this runtime."],["BlockId","BlockId type as expected by this runtime."],["BlockNumber","An index to a block."],["CheckedExtrinsic","Extrinsic type that has already been checked."],["CumulusXcm",""],["Currency",""],["Democracy",""],["DemocracyConfig",""],["DmpQueue",""],["ElectionsPhragmen",""],["ElectionsPhragmenConfig",""],["Executive","Executive: handles dispatch to the various modules."],["Fee",""],["FeeConfig",""],["GeneralCouncil",""],["GeneralCouncilConfig",""],["Hash","A hash of some data used by the chain."],["Header","Block header type as expected by this runtime."],["Issue",""],["IssueConfig",""],["LocalAssetTransactor",""],["LocalOriginToLocation","No local origins on this chain are allowed to dispatch XCM sends/executions."],["LockIdentifier","An identifier for a lock. Used for disambiguating different locks so that they can be individually replaced or removed."],["Moment","An instant or duration in time."],["Nomination",""],["NominationConfig",""],["Nonce","Index of a transaction in the chain. 32-bit should be plenty."],["Oracle",""],["OracleConfig",""],["ParachainInfo",""],["ParachainInfoConfig",""],["ParachainSystem",""],["ParachainSystemConfig",""],["PolkadotXcm",""],["Redeem",""],["RedeemConfig",""],["Refund",""],["RefundConfig",""],["Relay",""],["Replace",""],["ReplaceConfig",""],["Rewards",""],["Scheduler",""],["Security",""],["SecurityConfig",""],["Signature","Alias to 512-bit hash when used in the context of a transaction signature on the chain."],["SignedBlock","A Block signed with a Justification"],["SignedExtra","The SignedExtension to the basic transaction logic."],["SignedFixedPoint","The signed fixed point type."],["SignedInner","The `Inner` type of the `SignedFixedPoint`."],["Staking",""],["Sudo",""],["SudoConfig",""],["System",""],["SystemConfig",""],["TechnicalCommittee",""],["TechnicalCommitteeConfig",""],["TechnicalMembership",""],["TechnicalMembershipConfig",""],["Timestamp",""],["Tokens",""],["TokensConfig",""],["TransactionPayment",""],["Treasury",""],["TreasuryConfig",""],["UncheckedExtrinsic","Unchecked extrinsic type as expected by this runtime."],["UnknownTokens",""],["UnsignedFixedPoint","The unsigned fixed point type."],["UnsignedInner","The `Inner` type of the `UnsignedFixedPoint`."],["Utility",""],["VaultRegistry",""],["VaultRegistryConfig",""],["Vesting",""],["VestingConfig",""],["Weight","Numeric range of a transaction weight."],["XTokens",""],["XcmOriginToTransactDispatchOrigin","This is the type we use to convert an (incoming) XCM origin into a local `Origin` instance, ready for dispatching a transaction with Xcm’s `Transact`. There is an `OriginKind` which can biases the kind of local `Origin` it will become."],["XcmRouter","The means for routing XCM messages which are not for local execution into the right message queues."],["XcmpQueue",""]]});